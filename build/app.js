var JsonDummy;
(function (JsonDummy) {
    JsonDummy.app = angular.module("JsonDummy", ["ngMaterial"]);
    JsonDummy.app.config(["$mdThemingProvider", function ($mdThemingProvider) {
            $mdThemingProvider.theme("default").primaryPalette("blue-grey").accentPalette("yellow");
        }]);
})(JsonDummy || (JsonDummy = {}));

var JsonDummy;
(function (JsonDummy) {
    var JsonDummyController = (function () {
        function JsonDummyController($mdDialog) {
            this.$mdDialog = $mdDialog;
            this.populateCategories();
            this.properties = [];
            this.jsonResult = "";
        }
        JsonDummyController.prototype.populateCategories = function () {
            var _this = this;
            this.categories = [];
            var whitelist = [
                "address", "commerce", "company", "date", "finance", "hacker",
                "image", "internet", "lorem", "name", "phone", "random"
            ];
            _.each(faker, function (types, categoryName) {
                if (whitelist.indexOf(categoryName) !== -1) {
                    var categoryTypes = [];
                    _.each(types, function (ctor, typeName) {
                        categoryTypes.push({ name: typeName, ctor: ctor });
                    });
                    _this.categories.push({
                        name: categoryName,
                        types: categoryTypes
                    });
                }
            });
        };
        JsonDummyController.prototype.addNewProperty = function () {
            this.properties.push(new JsonDummy.Property());
        };
        JsonDummyController.prototype.generate = function () {
            var json = {};
            _.each(this.properties, function (property) {
                json[property.name] = property.selectedValueType.ctor();
            });
            this.jsonResult = JSON.stringify(json, null, 4);
        };
        JsonDummyController.$inject = ["$mdDialog"];
        return JsonDummyController;
    })();
    JsonDummy.JsonDummyController = JsonDummyController;
    JsonDummy.app.controller("JsonDummyController", JsonDummyController);
})(JsonDummy || (JsonDummy = {}));

var JsonDummy;
(function (JsonDummy) {
    var Property = (function () {
        function Property() {
        }
        Property.prototype.ctor = function () {
            this.name = "";
            this.selectedValueType = null;
        };
        return Property;
    })();
    JsonDummy.Property = Property;
})(JsonDummy || (JsonDummy = {}));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS50cyIsImNvbnRyb2xsZXIudHMiLCJtb2RlbHMudHMiXSwibmFtZXMiOlsiSnNvbkR1bW15IiwiSnNvbkR1bW15Lkpzb25EdW1teUNvbnRyb2xsZXIiLCJKc29uRHVtbXkuSnNvbkR1bW15Q29udHJvbGxlci5jb25zdHJ1Y3RvciIsIkpzb25EdW1teS5Kc29uRHVtbXlDb250cm9sbGVyLnBvcHVsYXRlQ2F0ZWdvcmllcyIsIkpzb25EdW1teS5Kc29uRHVtbXlDb250cm9sbGVyLmFkZE5ld1Byb3BlcnR5IiwiSnNvbkR1bW15Lkpzb25EdW1teUNvbnRyb2xsZXIuZ2VuZXJhdGUiLCJKc29uRHVtbXkuUHJvcGVydHkiLCJKc29uRHVtbXkuUHJvcGVydHkuY29uc3RydWN0b3IiLCJKc29uRHVtbXkuUHJvcGVydHkuY3RvciJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBTyxTQUFTLENBS2Y7QUFMRCxXQUFPLFNBQVMsRUFBQyxDQUFDO0lBQ0hBLGFBQUdBLEdBQUdBLE9BQU9BLENBQUNBLE1BQU1BLENBQUNBLFdBQVdBLEVBQUVBLENBQUNBLFlBQVlBLENBQUNBLENBQUNBLENBQUNBO0lBQzdEQSxhQUFHQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxvQkFBb0JBLEVBQUVBLFVBQUNBLGtCQUFrQkE7WUFDdkRBLGtCQUFrQkEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsU0FBU0EsQ0FBQ0EsQ0FBQ0EsY0FBY0EsQ0FBQ0EsV0FBV0EsQ0FBQ0EsQ0FBQ0EsYUFBYUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0E7UUFDekZBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO0FBQ0xBLENBQUNBLEVBTE0sU0FBUyxLQUFULFNBQVMsUUFLZjs7QUNKRCxJQUFPLFNBQVMsQ0ErQ2Y7QUEvQ0QsV0FBTyxTQUFTLEVBQUMsQ0FBQztJQUNkQTtRQU9JQyw2QkFBb0JBLFNBQVNBO1lBQVRDLGNBQVNBLEdBQVRBLFNBQVNBLENBQUFBO1lBQ3pCQSxJQUFJQSxDQUFDQSxrQkFBa0JBLEVB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TEYsZUFBQ0E7SUFBREEsQ0FQQU4sQUFPQ00sSUFBQU47SUFQWUEsa0JBQVFBLFdBT3BCQSxDQUFBQTtBQVdMQSxDQUFDQSxFQW5CTSxTQUFTLEtBQVQsU0FBUyxRQW1CZiIsImZpbGUiOiJhcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUgSnNvbkR1bW15IHtcclxuICAgIGV4cG9ydCBsZXQgYXBwID0gYW5ndWxhci5tb2R1bGUoXCJKc29uRHVtbXlcIiwgW1wibmdNYXRlcmlhbFwiXSk7XHJcbiAgICBhcHAuY29uZmlnKFtcIiRtZFRoZW1pbmdQcm92aWRlclwiLCAoJG1kVGhlbWluZ1Byb3ZpZGVyKSA9PiB7XHJcblx0XHQkbWRUaGVtaW5nUHJvdmlkZXIudGhlbWUoXCJkZWZhdWx0XCIpLnByaW1hcnlQYWxldHRlKFwiYmx1ZS1ncmV5XCIpLmFjY2VudFBhbGV0dGUoXCJ5ZWxsb3dcIik7XHJcblx0fV0pO1xyXG59IiwiZGVjbGFyZSB2YXIgZmFrZXI6IEZha2VyLkZha2VyU3RhdGljO1xyXG5tb2R1bGUgSnNvbkR1bW15IHtcclxuICAgIGV4cG9ydCBjbGFzcyBKc29uRHVtbXlDb250cm9sbGVyIHtcclxuICAgICAgICBwdWJsaWMgcHJvcGVydGllczogUHJvcGVydHlbXTtcclxuICAgICAgICBwdWJsaWMgY2F0ZWdvcmllczogSUZha2VyQ2F0ZWdvcnlbXTtcclxuICAgICAgICBwdWJsaWMgc2VsZWN0ZWRWYWx1ZVR5cGU6IElGYWtlclZhbHVlVHlwZTtcclxuICAgICAgICBwdWJsaWMganNvblJlc3VsdDogc3RyaW5nO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHN0YXRpYyAkaW5qZWN0ID0gW1wiJG1kRGlhbG9nXCJdO1xyXG4gICAgICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgJG1kRGlhbG9nKXtcclxuICAgICAgICAgICAgdGhpcy5wb3B1bGF0ZUNhdGVnb3JpZXMoKTtcclxuICAgICAgICAgICAgdGhpcy5wcm9wZXJ0aWVzID0gW107XHJcbiAgICAgICAgICAgIHRoaXMuanNvblJlc3VsdCA9IFwiXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHByaXZhdGUgcG9wdWxhdGVDYXRlZ29yaWVzKCkge1xyXG4gICAgICAgICAgICB0aGlzLmNhdGVnb3JpZXMgPSBbXTtcclxuXHRcdFx0dmFyIHdoaXRlbGlzdCA9IFtcclxuXHRcdFx0XHRcImFkZHJlc3NcIiwgXCJjb21tZXJjZVwiLCBcImNvbXBhbnlcIiwgXCJkYXRlXCIsIFwiZmluYW5jZVwiLCBcImhhY2tlclwiLFxyXG5cdFx0XHRcdFwiaW1hZ2VcIiwgXCJpbnRlcm5ldFwiLCBcImxvcmVtXCIsIFwibmFtZVwiLCBcInBob25lXCIsIFwicmFuZG9tXCJcclxuXHRcdFx0XTtcclxuXHRcdFx0Xy5lYWNoKGZha2VyLCAodHlwZXMsIGNhdGVnb3J5TmFtZSkgPT4ge1xyXG5cdFx0XHRcdGlmKHdoaXRlbGlzdC5pbmRleE9mKGNhdGVnb3J5TmFtZSkgIT09IC0xKXtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgY2F0ZWdvcnlUeXBlcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIF8uZWFjaCh0eXBlcywgKGN0b3IsIHR5cGVOYW1lKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhdGVnb3J5VHlwZXMucHVzaCh7bmFtZTogdHlwZU5hbWUsIGN0b3I6IGN0b3J9KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNhdGVnb3JpZXMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGNhdGVnb3J5TmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZXM6IGNhdGVnb3J5VHlwZXNcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cdFx0fVxyXG4gICAgICAgIFxyXG4gICAgICAgIHB1YmxpYyBhZGROZXdQcm9wZXJ0eSAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMucHJvcGVydGllcy5wdXNoKG5ldyBQcm9wZXJ0eSgpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgcHVibGljIGdlbmVyYXRlKCl7XHJcbiAgICAgICAgICAgIGxldCBqc29uID0ge307XHJcbiAgICAgICAgICAgIF8uZWFjaCh0aGlzLnByb3BlcnRpZXMsIChwcm9wZXJ0eTogUHJvcGVydHkpID0+IHtcclxuICAgICAgICAgICAgICAgIGpzb25bcHJvcGVydHkubmFtZV0gPSBwcm9wZXJ0eS5zZWxlY3RlZFZhbHVlVHlwZS5jdG9yKCk7ICAgIFxyXG4gICAgICAgICAgICB9KTsgICAgICAgICAgICBcclxuICAgICAgICAgICAgdGhpcy5qc29uUmVzdWx0ID0gSlNPTi5zdHJpbmdpZnkoanNvbiwgbnVsbCwgNCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgYXBwLmNvbnRyb2xsZXIoXCJKc29uRHVtbXlDb250cm9sbGVyXCIsIEpzb25EdW1teUNvbnRyb2xsZXIpO1xyXG59XHJcbiIsIm1vZHVsZSBKc29uRHVtbXkge1xyXG4gICAgZXhwb3J0IGNsYXNzIFByb3BlcnR5IHsgICAgICAgIFxyXG4gICAgICAgIHB1YmxpYyBuYW1lOiBzdHJpbmc7XHJcbiAgICAgICAgcHVibGljIHNlbGVjdGVkVmFsdWVUeXBlOiBJRmFrZXJWYWx1ZVR5cGU7IC8vIFRPRE86IGFkZCBzdXBwb3J0IGZvciBjdXN0b20gdmFsdWUgdHlwZXNcclxuICAgICAgICBjdG9yKCl7XHJcbiAgICAgICAgICAgIHRoaXMubmFtZSA9IFwiXCI7XHJcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRWYWx1ZVR5cGUgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgICAgICBcclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSUZha2VyQ2F0ZWdvcnkge1xyXG4gICAgICAgIG5hbWU6IHN0cmluZztcclxuICAgICAgICB0eXBlczogSUZha2VyVmFsdWVUeXBlW107XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSUZha2VyVmFsdWVUeXBlIHtcclxuICAgICAgICBuYW1lOiBzdHJpbmc7XHJcbiAgICAgICAgY3RvcjogKCkgPT4gYW55O1xyXG4gICAgfVxyXG59Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
